
Process Notes for React State Study
=================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my study/app development and the successive steps taken at each
milestone of the examination. In the case of studies, the process notes might be eschewed in favor of the main Readme document in the repository, 
mostly because of the advantage in formatting and accessibility. However, I will put additional notes and resource links that might be helpful. In 
the case of application development, groups of related steps are combined into "phase" modules so that they can be reorganized and refined in 
post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) and refining 
workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for past projects, but this 
one as well so I would urge you to consider at least doing a rough summary for your own benefit.



Objective of Study
==================
The objective of this study is to outline the process to create and render stateful components.
Component State
The component lifecycle
Event handlers




What is state?
==============

## State is the current condition of a component.
State is usually meant to describe the current condition something is in. 
React "state" is a feature that is used to change the current condition of a particular component.

For example, suppose we want to build a component that displays the date and time. (<TheDate />). Although you could solve this problem by passing in 
a prop for the date-time, this is inefficient because you would have to pass the date-time to the component from the parent every time it is rendered. 
Since the component needs to be self contianed, it needs to be responsible for its owen date-time. So instead of using props, we'll use state.


First, inside your src folder create a new folder called "state". After you have this, then create a class component called "TheDate". Note again here that since this is a custom 
component, you want to capitalize the first letter.
  --------------------------------------------
    import React from 'react'

    class TheDate extends React.Component {
      render() {
        return (
          <div />
        );
      }
    }

    export default TheDate;
  --------------------------------------------

  Then import and add TheDate to your App component:
  * Note that if you want ot see if this is working correctly, you can use th eReact developer tools to see 
  the component inside the App component.
  ------------------------------------------------------
    import React from 'react';
    import TheDate from './state/TheDate';                 // import TheDate.

    function App() {
      return (
        <main className='App'>
          <TheDate />                                      // TheDate component.
        </main>
      );
    }

    export default App;
  ---------------------------------------------------------




NOW FOR THE STATE!!!




How do you use state with a React component?
============================================

## Add a constructor function to your component.
To create the functionality for date-time, that is, to create the date-time when the TheDate component instances 
are created (instatiated), you need to use the new method in React Classes called "constructor". 

A constructor method is called when an instance of a class is created. In React class components, the props are 
supplied to the constructor as an argument.
----------------------------------------------------------
  class TheDate extends React.Component {
    constructor() {                                         // constructor method 
      
    }
    render() {
      return (
        <div />
      )
    }
  }
----------------------------------------------------------

## ALWAYS add Super(props) inside your React components.
However, when you add this empty constructor, you will get an extensive error that says "ReferenceError: Must call super 
constructor in derived class before accessing 'this' or returning from derived constructor". Why has this error occured? 

It occurs because the constructor is used by React internals when the components are created. Constructors are a 
life-cycle method.To resolve this error, you need to add a "super" inside the constructor function. ALWAYS add super(props) 
to React class component constructor methods.
----------------------------------------------------------
  class TheDate extends React.Component {
    constructor(props) {                                   // constructor method that takes props as a parameter and...
      super(props)                                         // when you call "super", you pass in props.
    }
    render() {
      return (
        <div />
      )
    }
  }
----------------------------------------------------------

## Classes are blueprints
Think of a "class" like a blueprint. The "React.Component" is itself a class that React provides you. and when you create a component class with
"class MyClass extends AnotherClass", what you are doing is copying (i.e. extending) the blueprint from one class to the new class. So when you
do "class MyClass extends React.Component", you are building a NEW blueprint based off of the existing "React.Component" class.

## The "super" function reaches to the orginal blueprint.
The "super" function is used inside classes to reach the original blueprint. In the case of our use of super here, you are repeating the functionality
 that was defined in the constructor INSIDE the React.Component class. So think of super as the window outside the component to React.Component.

## Set the initial state in the constuctor with "this.state".
To implement state, you need to initialize state in the class component by assinging values to "this.state" inside the constructor. State is often 
set as an object. Inside the state object, you can add properties that set the initial state.

## Access initial states with this.state.X in the render.
To access the initial state with the render function.
----------------------------------------------------------
  class TheDate extends React.Component {
    constructor(props) {                       
      super(props)              
      this.state = {                                          // this.state will hold the initial state of the component.
        foo: 'foo',                                           // initial states in this case includes these properties.
        hello: 'Hello, world!',
        list: [1, 2, 3],
        obj: { nested: 'object', yes: true },
      };                                      
    }
    render() {
      return (
        <div>
          {this.state.hello}                                  // access the state with the render function.
        </div>
      )
    }
  }
----------------------------------------------------------



How do you write tests for state components?
============================================
To write tests for state components, you can simply write normal Jest tests. Note that for the snapshot test, you want
to skip it because it will fail.  This is because the date is generated fresh every time it renders so it will always fail.
To skip this test, just add .skip to the it function you wish to keep as a "work in progress" test code.

--------------------------------------------------------------
  import React from 'react';
  import ReactDOM from 'react-dom'
  import renderer from 'react-test-renderer'
  import TheDate from './TheDate'

  describe(`TheDate Component`, () => {
    it('renders without crashing', () => {
      const div = document.createElement('div');
      ReactDOM.render(<TheDate />, div);
      ReactDOM.unmountComponentAtNode(div);
    })

    it.skip('renders the UI as expected', () => {
      expect(
        renderer.create(<TheDate />).toJSON()
      ).toMatchSnapshot()
    })
  })
--------------------------------------------------------------





What is the component lifecycle?
=================================
Think of the component lifecycle like a buffet restaurant.
  1. You enter the restaurant
  2. Collect the food from the buffet
  3. Eat the food.
  4. Ask for condiments, water, cutlery.
  5. Pay the bill and leave.

Steps 1-5 only happen once for any visit to the buffet restaurant.
However, steps 2-3 happen multiple times.
In fact, you might repeat the whole process at a different restaurant.

React components have a similar "life-cycle".
Here are some of the life-cycle methods a React component has and how you think of them with the analogy:

 1. "Constructor" is entering the restaurant and asking for the buffet.
 2. "render" is collecting the food from the buffet.
 3. DOM IS UPDATED is you eating the food (note this isnt a life-cycle method but part of the life-cycle).
 4. "componentDidMount" asks for condiments, water, utensils.
 5. "componentWillMount" is paying the bill and leaving.


The "constructor" happens once per component instance (i.e. once every time we use the component in JSX).
The "render" can happen multiple times, for example if the props keep changing, the render will occur with every change.

The "componentDidMount" could happen multiple times, like when there is a conditional rendering where props change the 
component from rendered to not rendered.




How do you visualize the life-cycle?
====================================

 {Instance of component}
          |
    [Constructor]
          |
       [Render] <------ {props changed} 
          |
 (Will component be removed from the DOM?) ---Yes---> [componentWillUnmount]
          |                                                  |
          No                                                 |
          |                                                  |
    {Update the DOM}    <------------------------------------|
          |
  [Was component Added to the DOM?]  -----Yes -------> [componentDidMount]
          |
          No
          |
          V




How do you update the state of a component?
===========================================
Components created as classes have a lot of features, such as lifecycle methods. The constructor and the render life-cycle initialize the state and update the DOM.


-----------------------------------------------------------------
import React from 'react'

class TheDate extends React.Component {
  constructor(props) {                                                // 1. The component is created (i.e. <Component />)
    super(props)                                                      
    this.state = { datetime: new Date() };
    console.log('constructor')
  }
  componentDidMount() {                                               // 4.A. The component has been added to the DOM.
    console.log('componentDidMount')
    this.interval = setInterval(() => {
      console.log('setInterval')
      this.setState({
        datetime: new Date()
      })
    }, 1000)
  }
  componentWillUnmount() {                                           // 4.B. The compoent is about to be removed from the DOM. When the parent components render doesnt render this component anymore, the compoennt will be removed.
    clearInterval(this.interval)
  }
  render() {                                                          // 2. Component reacts to being created and updated (can happen again if props or state change).
                                                                      // 3. Update the DOM -- If the components render returns something, it will be mounted. Of result of render function is different, it will be updated.
    console.log('render')                                             
    return (  
      <div>{this.state.datetime.toLocaleString()}</div>
    )
  }
}

export default TheDate;

-----------------------------------------------------------------


technical details
==================